
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыполнитьДействияПриСозданииФормы();
	
	СтруктураНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", "Настройки сверки взаиморасчетов", Новый Структура);
	
	Если СтруктураНастроек.Свойство("ПанельНастройкиСкрыта") Тогда
		ПанельНастройкиСкрыта = СтруктураНастроек.ПанельНастройкиСкрыта;
	Иначе
		ПанельНастройкиСкрыта = Истина;
	КонецЕсли;
	УстановитьВидимость();
	
	Если СтруктураНастроек.Свойство("НастройкиКомпоновщика") Тогда
		Объект.Компоновщик.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		ЗапомнитьНастройки();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

 &НаКлиенте
Процедура ПоДоговорамПриИзменении(Элемент)
	
	Если Объект.ТабСчета.Количество() Тогда
		СформироватьОтчет(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьАкты(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.ТабСчета Цикл
		Если СтрокаТаблицы.Выбор Тогда 
			ДанныеСтроки = Новый Структура("Контрагент,Организация,АдресЭлектроннойПочты,УчетнаяЗаписьОрганизации, ДоговорКонтрагента");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			Результат = ЗаполнитьДокументы(Ложь, ДанныеСтроки);
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Состояние("Обновление списка документов...");
	ОбновитьТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)	

	Табдок = ПолучитьАктСверкиВзаиморасчетовНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьНастройки(Команда)
	
	ЭтаФорма.ПанельНастройкиСкрыта = Не ЭтаФорма.ПанельНастройкиСкрыта;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.ТабСчета Цикл
	
		СтрокаТаблицы.Выбор = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.ТабСчета Цикл
	
		СтрокаТаблицы.Выбор = Ложь;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеАкты(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.АктыСверки Цикл
	
		СтрокаТаблицы.Выбор = Истина;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеАкты(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.АктыСверки Цикл
	
		СтрокаТаблицы.Выбор = Ложь;
	
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.Период.ДатаНачала, Объект.Период.ДатаОкончания);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = Новый СтандартныйПериод(Объект.Период.ДатаНачала, Объект.Период.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры   

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьДействияПриСозданииФормы() Экспорт

	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	АдресСхемыКомпоновкиДанных = МодульОбработки.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, МодульОбработки);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры // ВыполнитьДействияПриСозданииФормы()

&НаСервере
Процедура УстановитьВидимость()

	Элементы.ВидимостьНастройки.Пометка = Не ЭтаФорма.ПанельНастройкиСкрыта;
	Элементы.СтраницыНастроек.Видимость = НЕ ПанельНастройкиСкрыта;
		
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОбновитьТаблицу()
	
	// Проверка возможности формирования
	Отказ = Ложь;
	Если Объект.Период.ДатаНачала > Объект.Период.ДатаОкончания Тогда
		ВызватьИсключение НСтр("ru ='Период указан некорректно. Дата начала больше даты окончания.'");
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим данные по настроенной СКД
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	ТаблицаДокументы = МодульОбработки.ПолучитьТаблицуДокументов(АдресСхемыКомпоновкиДанных, Объект.Компоновщик); 

	Элементы.ТабСчетаДоговорКонтрагента.Видимость = ПоДоговорам;
	
	Если ПоДоговорам Тогда
		ТаблицаДокументы.Свернуть("Контрагент,Организация,АдресЭлектроннойПочты,УчетнаяЗаписьОрганизации,ДоговорКонтрагента");
	Иначе
		ТаблицаДокументы.Свернуть("Контрагент,Организация,АдресЭлектроннойПочты,УчетнаяЗаписьОрганизации");
	КонецЕсли;
	
	Объект.ТабСчета.Загрузить(ТаблицаДокументы);
			
КонецПроцедуры // ОбновитьТаблицу()

&НаСервере
Процедура ЗапомнитьНастройки()
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ПанельНастройкиСкрыта", ПанельНастройкиСкрыта);
	СтруктураНастроек.Вставить("НастройкиКомпоновщика", Объект.Компоновщик.Настройки);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", "Настройки рассылки актов сверки взаиморасчетов", СтруктураНастроек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставительОрганизации(Знач Организация, Знач Дата)
	
	Возврат Документы.АктСверкиВзаиморасчетов.ПредставительОрганизации(Организация, Дата);
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокументы(ЗаполнятьДанныеКонтрагента, ДанныеСтроки)
	
	ДокОбъект = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.ДатаНачала 	= Объект.Период.ДатаНачала;
	ДокОбъект.ДатаОкончания = Объект.Период.ДатаОкончания;   
	ДокОбъект.Организация 	= ДанныеСтроки.Организация; 
	ДокОбъект.ПредставительОрганизации = ПредставительОрганизации(ДокОбъект.Организация, ДокОбъект.Дата);	
	ДокОбъект.ДоговорКонтрагента 	= ДанныеСтроки.ДоговорКонтрагента;	
	ДокОбъект.ВалютаДокумента 		= ВалютаРегламентированногоУчета;
	
	ДокОбъект.Контрагент = ДанныеСтроки.Контрагент;
	ДокОбъект.ПредставительКонтрагента = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Контрагент, "ОсновноеКонтактноеЛицо");
		
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	ДокОбъект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачала",                    ДокОбъект.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания",                 Новый Граница(КонецДня(ДокОбъект.ДатаОкончания), ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация",                   ДокОбъект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                    ДокОбъект.Контрагент);
	СтруктураПараметров.Вставить("СОбособленнымиПодразделениями", ДокОбъект.СОбособленнымиПодразделениями);
	СтруктураПараметров.Вставить("ВыводитьСчетаФактуры",          ДокОбъект.ВыводитьСчетаФактуры);
	СтруктураПараметров.Вставить("ЗаполнятьДанныеКонтрагента",    ЗаполнятьДанныеКонтрагента);
	СтруктураПараметров.Вставить("Валюта", ?((ДокОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, ДокОбъект.ВалютаДокумента));
	
	ФильтрСписокСчетов = Новый Массив();
	Для Каждого СтрокаСчета Из ДокОбъект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли;
	КонецЦикла;
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	ДоговорКонтрагента = ?(НЕ ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента), Неопределено, ДокОбъект.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", ДокОбъект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", ДокОбъект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", ДокОбъект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаСОшибками);
		АдресХранилищаСОшибками = "";
	КонецЕсли;
	
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилищаСОшибками", АдресХранилищаСОшибками);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания 	= "ЗаполнитьПоДаннымОрганизации";
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		ПараметрыВыполнения);
		
	СтруктураДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	РезультатВыполнения.Вставить("Успешно", Ложь);

	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения.Успешно = СтруктураДанных.Успешно;
	
	Если СтруктураДанных.Успешно Тогда
			
		ДокОбъект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
		Если СтруктураДанных.Свойство("ПоДаннымКонтрагента") Тогда
			ДокОбъект.ПоДаннымКонтрагента.Загрузить(СтруктураДанных.ПоДаннымКонтрагента);
		КонецЕсли;
		
		Если ДокОбъект.ПоДаннымОрганизации.Количество() Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			НовСтрока = Объект.АктыСверки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ДанныеСтроки);
			НовСтрока.АктСверкиВзаиморасчетов = ДокОбъект.Ссылка;
		КонецЕсли;       
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПолучитьАктСверкиВзаиморасчетовНаСервере()

	Тело = ТекстПисьма;
		
	ПредыдущийКонтрагент = Неопределено;
	ПредыдущаяОрганизация = Неопределено;
	МассивДокументов = Новый Массив;
	УправлениеПечатьюБП.СохранитьНастройкиПодписиИПечати(Истина, Истина);
	Для Каждого СтрокаТаблицы Из Объект.АктыСверки Цикл 
		
		Если СтрокаТаблицы.Выбор Тогда 
			
			Если (ПредыдущийКонтрагент <> Неопределено И ПредыдущийКонтрагент <> СтрокаТаблицы.Контрагент)
				ИЛИ (ПредыдущаяОрганизация <> Неопределено И ПредыдущаяОрганизация <> СтрокаТаблицы.Организация) Тогда
			    // Отправляем предыдущее письмо
				Если МассивДокументов.Количество() Тогда
					ОтправитьЭлектронноеПисьмо(МассивДокументов);
					МассивДокументов.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			ПредыдущийКонтрагент = СтрокаТаблицы.Контрагент;
			ПредыдущаяОрганизация = СтрокаТаблицы.Организация;
			
			АктСверкиВзаиморасчетов = СтрокаТаблицы.АктСверкиВзаиморасчетов;
			
			МассивАктов = Новый Массив;
			МассивАктов.Добавить(АктСверкиВзаиморасчетов);
			
			ИменаМакетов = Новый Массив;
			Именамакетов.Добавить("АктСверки"); 
			ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
			
			Результат = УправлениеПечатью.СформироватьПечатныеФормы("Документ.АктСверкиВзаиморасчетов", Именамакетов, МассивАктов, ПараметрыПечати, , "");
			ТабДок = Результат.КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			
			// вывод факсимиле
			МассивТабДок = Новый Массив;
			СтруктураТабДок = Новый Структура("Значение", ТабДок);
			МассивТабДок.Добавить(СтруктураТабДок); 
			
			СтруктураДокументов = Новый Структура("Значение", АктСверкиВзаиморасчетов);  
			МассивДок = Новый Массив;
			МассивДок.Добавить(СтруктураДокументов);
			
			СтруктураМассива = Новый Структура("ОбъектыПечати,ТабличныеДокументы", МассивДок, МассивТабДок);
			МассивСтруктур = Новый Массив;
			МассивСтруктур.Добавить(СтруктураМассива);
			
			УправлениеПечатьюБП.ДобавитьФаксимилеПриОтправке(МассивСтруктур);
			
			ИмВрФайла = ПолучитьИмяВременногоФайла("PDF");
			
			Табдок.Записать(ИмВрФайла, "PDF");
			
			Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмВрФайла));
			
			СтруктураДокументов = Новый Структура("Акт,ТабДок,Адрес,СтрокаТаблицы,ИмВрФайла", АктСверкиВзаиморасчетов, ТабДок, Адрес, СтрокаТаблицы, ИмВрФайла);
			МассивДокументов.Добавить(СтруктураДокументов);
			
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивДокументов.Количество() Тогда
		ОтправитьЭлектронноеПисьмо(МассивДокументов);
		МассивДокументов.Очистить();	
	КонецЕсли;
	
	Возврат Неопределено;  
	
КонецФункции

&НаСервере
Процедура ОтправитьЭлектронноеПисьмо(МассивДокументов)
	
	Если Не МассивДокументов.Количество() Тогда
		Возврат;	
	КонецЕсли;
	
	ВремяПоследнейОтправки = НачалоДня(ТекущаяДатаСеанса());
	Соединение = Неопределено;
	СтрокаТаблицы = МассивДокументов[0].СтрокаТаблицы;	
	
	ПараметрыОтправки = Новый Структура;
	
	Если Не СтрокаТаблицы.АдресЭлектроннойПочты = "" Тогда
		
		Кому = Новый Массив;
		
		МассивОбъектов = Новый Массив;
		Вложения = Новый Массив;
		
		ПечатныеФормыПоОбъектам = Новый ТаблицаЗначений;
		ПечатныеФормыПоОбъектам.Колонки.Добавить("Объект");
		ПечатныеФормыПоОбъектам.Колонки.Добавить("ПечатныеФормы");
		ПечатныеФормыПоОбъектам.Индексы.Добавить("Объект");
		
		Для каждого СтруктураДокумента Из МассивДокументов Цикл
			
			АктСверкиВзаиморасчетов = СтруктураДокумента.Акт;
			МассивОбъектов.Добавить(АктСверкиВзаиморасчетов);
			
			НовСтрока = ПечатныеФормыПоОбъектам.Добавить();
			НовСтрока.Объект = АктСверкиВзаиморасчетов;
			ПечФормы = Новый Соответствие; 
			СписокЗначенийКлюча = Новый СписокЗначений;
			СписокЗначенийКлюча.Вставить(0, СтруктураДокумента.ТабДок, "Акт сверки взаиморасчетов");
			ПечФормы.Вставить(СписокЗначенийКлюча[0], СтруктураДокумента.ТабДок);
			НовСтрока.ПечатныеФормы = ПечФормы;	  
			
			ВложениеСтруктура = Новый Структура;
			ВложениеСтруктура.Вставить("Представление", "Акт сверки взаиморасчетов № " + АктСверкиВзаиморасчетов.Номер + " от " + Формат(АктСверкиВзаиморасчетов.Дата, "ДФ=dd.MM.yyyy") + ".PDF");
			ВложениеСтруктура.Вставить("АдресВоВременномХранилище", СтруктураДокумента.Адрес);
			Вложения.Добавить(ВложениеСтруктура);
			
		КонецЦикла;
		
		ПараметрыПисьма = ПараметрыОтправкиПисьма();
		
		ПараметрыПисьма.Вложения = Вложения;
		
		ОтправкаПочтовыхСообщений.ЗаполнитьТемуПолучателяПисьма(МассивОбъектов, ПечатныеФормыПоОбъектам, ПараметрыПисьма);
		
		МассивАдресов = СтрРазделить(СтрокаТаблицы.АдресЭлектроннойПочты, ",", Ложь);
		
		ПредставлениеКонтрагента = Строка(СтрокаТаблицы.Контрагент);
		
		Для Каждого АдресПочты Из МассивАдресов Цикл
			Кому.Добавить(Новый Структура("Адрес, Представление", СокрЛП(АдресПочты), ПредставлениеКонтрагента));
		КонецЦикла;
		ТекстПисьма.УстановитьHTML(ПараметрыПисьма.Текст, ВложениеСтруктура);
		ПараметрыОтправки.Вставить("Кому", Кому);
		ПараметрыОтправки.Вставить("Тема", ПараметрыПисьма.Тема);
		ПараметрыОтправки.Вставить("Тело", ТекстПисьма);
		ПараметрыОтправки.Вставить("Вложения", Вложения);
		
		Пока ТекущаяДатаСеанса() < ВремяПоследнейОтправки + 15 Цикл
			// нужна пауза между отправками из-за ограничений в работе почтового сервера
		КонецЦикла;
		
		Попытка
			
			ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СтрокаТаблицы.УчетнаяЗаписьОрганизации, ПараметрыОтправки, Соединение);
			Для каждого Стр Из МассивДокументов Цикл
				Стр.СтрокаТаблицы.Выбор = Ложь;
			КонецЦикла;
			
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось отправить письмо по строке № " + СтрокаТаблицы.НомерСтроки + "." + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ВремяПоследнейОтправки = ТекущаяДатаСеанса();   
		
		УдалитьФайлы(СтруктураДокумента.Адрес);  // удаление файла
		УдалитьФайлы(СтруктураДокумента.ИмВрФайла);  // удаление файла
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю("Не указан адрес электронной почты в строке № " + СтрокаТаблицы.НомерСтроки + ".");

	КонецЕсли;

КонецПроцедуры // ОтправитьЭлектронноеПисьмо()

&НаСервере
Функция ПараметрыОтправкиПисьма()
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Отправитель", Неопределено);
	ПараметрыПисьма.Вставить("Получатель", Неопределено);
	ПараметрыПисьма.Вставить("Копии", Неопределено);
	ПараметрыПисьма.Вставить("СкрытыеКопии", Неопределено);
	ПараметрыПисьма.Вставить("Тема", Неопределено);
	ПараметрыПисьма.Вставить("Текст", Неопределено);
	ПараметрыПисьма.Вставить("Вложения", Неопределено);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", Неопределено);
	ПараметрыПисьма.Вставить("Предмет", Неопределено);
	
	Возврат ПараметрыПисьма;  
	
КонецФункции

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	// для совместимости - подвал Счета
	МассивИменПоказателей.Добавить("ФаксимильнаяПечать");
	МассивИменПоказателей.Добавить("ФаксимильнаяПечатьПредприниматель");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект.Период, РезультатВыбора);
		
КонецПроцедуры

#КонецОбласти